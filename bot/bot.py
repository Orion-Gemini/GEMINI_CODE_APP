import os
import asyncio
import base64
import re
from telegram import BotCommandScopeAllPrivateChats, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from io import BytesIO
from dotenv import load_dotenv

import aiohttp
import requests
from telegram import Update, BotCommand
from telegram.ext import (
    ApplicationBuilder, CommandHandler,
    MessageHandler, ContextTypes, filters
)

# === –ö–û–ù–°–¢–ê–ù–¢–´ ===
MAX_HISTORY_MESSAGES = 4
MAX_RETRIES = 3
WEBAPP_URL = os.getenv("WEBAPP_URL", "https://your-domain.com")
# ===============================

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
load_dotenv()

TOKEN = os.getenv("TELEGRAM_TOKEN")
GAS_PROXY_URL = os.getenv("GAS_PROXY_URL")

TOKEN = TOKEN.strip() if TOKEN else None
GAS_PROXY_URL = GAS_PROXY_URL.strip() if GAS_PROXY_URL else None

if not TOKEN or not GAS_PROXY_URL:
    print("–û—à–∏–±–∫–∞: –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ TELEGRAM_TOKEN –∏ GAS_PROXY_URL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ —Ñ–∞–π–ª–µ .env")
    exit(1)


# === –£–¢–ò–õ–ò–¢–ê: –≠–ö–†–ê–ù–ò–†–û–í–ê–ù–ò–ï MARKDOWNV2 ===
def escape_markdown_v2(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã MarkdownV2, –∫—Ä–æ–º–µ —Ç–µ—Ö, —á—Ç–æ –≤–Ω—É—Ç—Ä–∏ –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞."""
    escape_chars = r'_*[]()~`>#+-=|{}.!'
    code_blocks = re.findall(r"```.*?```", text, re.DOTALL)
    placeholder = "___CODE_BLOCK___"

    text_processed = re.sub(r"```.*?```", placeholder, text, flags=re.DOTALL)
    text_escaped = re.sub(f"([{re.escape(escape_chars)}])", r'\\\1', text_processed)

    for block in code_blocks:
        text_escaped = text_escaped.replace(placeholder, block, 1)

    return text_escaped


# === Gemini-–ø—Ä–æ–∫—Å–∏ ===
async def query_gemini(prompt: str, file_data: str = None, mime_type: str = None, history: list = None) -> str:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ Gemini —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏."""
    system_instruction_text = (
        "–û—Ç–≤–µ—á–∞–π –≤—Å–µ–≥–¥–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥—Ä—É–≥–æ–≥–æ —É–∫–∞–∑–∞–Ω–∏—è. "
        "–ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª, –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –µ–≥–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π. "
        "–ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –∫–æ–¥, **–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–π –µ–≥–æ –≤ –±–ª–æ–∫ —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞** "
        "(–Ω–∞–ø—Ä–∏–º–µ—Ä, ```python\\n–≤–∞—à_–∫–æ–¥\\n```). "
        "**–ü–µ—Ä–µ–¥ –±–ª–æ–∫–æ–º –∫–æ–¥–∞** –¥–æ–±–∞–≤—å –∫—Ä–∞—Ç–∫–æ–µ –≤–≤–æ–¥–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ."
    )

    contents = history if history else []

    if not history:
        contents.append({
            "role": "user",
            "parts": [{"text": system_instruction_text}]
        })

    current_user_parts = []

    if file_data and mime_type:
        current_user_parts.append({
            "inlineData": {
                "mimeType": mime_type,
                "data": file_data
            }
        })

    current_user_parts.append({"text": prompt})

    contents.append({
        "role": "user",
        "parts": current_user_parts
    })

    payload = {
        "model": "gemini-2.5-flash",
        "args": {
            "contents": contents
        }
    }

    for attempt in range(MAX_RETRIES):
        try:
            async with aiohttp.ClientSession() as s:
                async with s.post(GAS_PROXY_URL, json=payload, timeout=60) as r:
                    if r.status >= 500:
                        if attempt < MAX_RETRIES - 1:
                            await asyncio.sleep(1)
                            continue
                        else:
                            r.raise_for_status()

                    r.raise_for_status()
                    data = await r.json()

                    text = (
                        data.get("candidates", [{}])[0]
                        .get("content", {})
                        .get("parts", [{}])[0]
                        .get("text", "")
                    )
                    return text or data.get("error", "–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –≤ –æ—Ç–≤–µ—Ç–µ.")

        except (aiohttp.ClientError, asyncio.TimeoutError) as e:
            if attempt < MAX_RETRIES - 1:
                await asyncio.sleep(1)
                continue
            else:
                return f"–û—à–∏–±–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ø—Ä–æ–∫—Å–∏ –ø–æ—Å–ª–µ {MAX_RETRIES} –ø–æ–ø—ã—Ç–æ–∫: {e}"
        except Exception as e:
            return f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Gemini: {e}"

    return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫."


# === –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ ===
async def _download_file_as_base64(context: ContextTypes.DEFAULT_TYPE, file_id: str) -> str:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –∏–∑ Telegram –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ Base64."""
    try:
        file_obj = await context.bot.get_file(file_id)
        download_url = file_obj.file_path

        if not download_url:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞.")

        async with aiohttp.ClientSession() as s:
            async with s.get(download_url) as r:
                r.raise_for_status()
                file_bytes = await r.read()

        return base64.b64encode(file_bytes).decode('utf-8')
    except Exception as e:
        raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–ª–∏ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")


# === –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî Gemini Proxy Bot, —Å—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ —Ç–µ–∫—Å—Ç–∞ –∏ —Ñ–∞–π–ª–æ–≤.\n"
        "–ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏ —Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç (PDF, TXT) —Å –≤–æ–ø—Ä–æ—Å–æ–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!"
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥."""
    keyboard = [[
        InlineKeyboardButton(
            "üì± –û—Ç–∫—Ä—ã—Ç—å Web App",
            web_app=WebAppInfo(url=WEBAPP_URL)
        )
    ]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "üìò –ö–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –Ω–∞—á–∞—Ç—å\n"
        "/help ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
        "/reset ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞\n"
        "/app ‚Äî –æ—Ç–∫—Ä—ã—Ç—å Web App\n\n"
        "üí¨ –í –≥—Ä—É–ø–ø–µ –∏—Å–ø–æ–ª—å–∑—É–π **@**, —á—Ç–æ–±—ã –±–æ—Ç –æ—Ç–≤–µ—Ç–∏–ª. –ë–æ—Ç –ø–æ–º–Ω–∏—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.\n"
        "üñºÔ∏è –ê–Ω–∞–ª–∏–∑: –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç (PDF, TXT) —Å –ø–æ–¥–ø–∏—Å—å—é, **—É–ø–æ–º—è–Ω—É–≤ –±–æ—Ç–∞ (@–≤–∞—à_–±–æ—Ç)**, –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.",
        reply_markup=reply_markup
    )


async def reset_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞."""
    chat_id = update.message.chat_id
    if 'history' in context.user_data and chat_id in context.user_data['history']:
        context.user_data['history'][chat_id] = []
        await update.message.reply_text("‚úÖ –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –±—ã–ª–∞ –æ—á–∏—â–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä.")
    else:
        await update.message.reply_text("‚ö†Ô∏è –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ —É–∂–µ –ø—É—Å—Ç–∞.")


async def webapp_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è Mini App"""
    keyboard = [[
        InlineKeyboardButton(
            "üì± –û—Ç–∫—Ä—ã—Ç—å Web App",
            web_app=WebAppInfo(url=WEBAPP_URL)
        )
    ]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "–û—Ç–∫—Ä–æ–π—Ç–µ Web App –¥–ª—è —É–¥–æ–±–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å Gemini AI:",
        reply_markup=reply_markup
    )


# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–û–ë–©–ï–ù–ò–ô ===
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∑–∞–ø—Ä–æ—Å—ã –≤ —á–∞—Ç–∞—Ö/–≥—Ä—É–ø–ø–∞—Ö."""
    if not update.message or not update.message.text:
        return

    chat_id = update.message.chat_id

    if 'history' not in context.user_data:
        context.user_data['history'] = {}

    chat_history = context.user_data['history'].get(chat_id, [])

    bot_username = (await context.bot.get_me()).username.lower()
    text = update.message.text

    # –í –≥—Ä—É–ø–ø–µ –æ—Ç–≤–µ—á–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏—é
    if update.message.chat.type in ("group", "supergroup"):
        if f"@{bot_username}" not in text.lower():
            return
        text = text.replace(f"@{bot_username}", "").strip()

    if not text:
        if update.message.chat.type in ("group", "supergroup"):
            await update.message.reply_text(
                "üí¨ –ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –º–µ–Ω—è!"
            )
        return

    await update.message.chat.send_action(action="TYPING")
    status_message = await update.message.reply_text("‚åõ –î—É–º–∞—é...")

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º query_gemini —Å –∏—Å—Ç–æ—Ä–∏–µ–π
    answer = await query_gemini(text, history=chat_history)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
    chat_history.append({
        "role": "user",
        "parts": [{"text": text}]
    })
    chat_history.append({
        "role": "model",
        "parts": [{"text": answer}]
    })

    # –û–±—Ä–µ–∑–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
    chat_history = chat_history[-(MAX_HISTORY_MESSAGES):]
    context.user_data['history'][chat_id] = chat_history

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    escaped_answer = escape_markdown_v2(answer)

    try:
        await status_message.edit_text(escaped_answer, parse_mode='MarkdownV2')
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ edit_text (MarkdownV2): {e}")
        for chunk in [escaped_answer[i:i + 4000] for i in range(0, len(escaped_answer), 4000)]:
            try:
                await update.message.reply_text(chunk, parse_mode='MarkdownV2')
            except Exception as e_reply:
                print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ reply_text (MarkdownV2): {e_reply}")
                await update.message.reply_text(
                    "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –í–æ—Ç —Ç–µ–∫—Å—Ç –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n" + answer)


async def handle_files(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–æ—Ç–æ, –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ –∏—Ö –ø–æ–¥–ø–∏—Å–∏ —Å –ø–æ–º–æ—â—å—é Gemini."""
    if not update.message:
        return

    is_group = update.message.chat.type in ("group", "supergroup")
    bot_username = (await context.bot.get_me()).username
    user_prompt = update.message.caption or update.message.text

    if is_group:
        if not user_prompt or f"@{bot_username}" not in user_prompt:
            return
        user_prompt = user_prompt.replace(f"@{bot_username}", "").strip()

    file_id = None
    mime_type = None

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∞–π–ª
    if update.message.photo:
        largest_photo = update.message.photo[-1]
        file_id = largest_photo.file_id
        mime_type = "image/jpeg"
    elif update.message.document:
        document = update.message.document
        supported_mimes = [
            "image/jpeg",
            "image/png",
            "application/pdf",
            "text/plain",
        ]
        if document.mime_type in supported_mimes:
            file_id = document.file_id
            mime_type = document.mime_type
        else:
            await update.message.reply_text(
                f"–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª —Ç–∏–ø–∞: `{document.mime_type}`. "
                f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, PDF –∏ TXT."
            )
            return
    else:
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞
    if not user_prompt:
        user_prompt = "–û–ø–∏—à–∏ —ç—Ç–æ—Ç —Ñ–∞–π–ª –∏ –æ—Ç–≤–µ—Ç—å, —á—Ç–æ –Ω–∞ –Ω—ë–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ, –∏–ª–∏ —á—Ç–æ –≤ –Ω—ë–º —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è."

    # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
    await update.message.chat.send_action(action="TYPING")
    status_message = await update.message.reply_text(f"1Ô∏è‚É£ –ó–∞–≥—Ä—É–∂–∞—é –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à —Ñ–∞–π–ª ({mime_type})...")

    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –∏ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ base64
        base64_data = await _download_file_as_base64(context, file_id)

        # –ê–Ω–∞–ª–∏–∑ Gemini
        await update.message.chat.send_action(action="TYPING")
        await status_message.edit_text("2Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–∞–π–ª —Å –ø–æ–º–æ—â—å—é Gemini...")

        answer = await query_gemini(user_prompt, base64_data, mime_type, history=[])

        # –û—Ç–≤–µ—Ç
        escaped_answer = escape_markdown_v2(answer)
        await status_message.edit_text(escaped_answer, parse_mode='MarkdownV2')

    except Exception as e:
        error_msg = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–¥—Ä–æ–±–Ω–µ–µ: {str(e)}"
        print(f"File handling error: {e}")
        try:
            await status_message.edit_text(error_msg)
        except Exception:
            await update.message.reply_text(error_msg)


# === –£–°–¢–ê–ù–û–í–ö–ê –ö–û–ú–ê–ù–î ===
async def set_bot_commands(app):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥ –≤ –º–µ–Ω—é –±–æ—Ç–∞."""
    commands = [
        BotCommand("start", "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
        BotCommand("help", "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"),
        BotCommand("reset", "–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞"),
        BotCommand("app", "–û—Ç–∫—Ä—ã—Ç—å Web App"),
    ]

    await app.bot.set_my_commands(
        commands,
        scope=BotCommandScopeAllPrivateChats()
    )


# === –ó–ê–ü–£–°–ö ===
def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    app = ApplicationBuilder().token(TOKEN).concurrent_updates(True).read_timeout(30).build()

    # === –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ===
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("reset", reset_command))
    app.add_handler(CommandHandler("app", webapp_command))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    file_handler = MessageHandler(
        filters.PHOTO | filters.Document.ALL,
        handle_files
    )
    app.add_handler(file_handler)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    app.post_init = set_bot_commands

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –†–∞–±–æ—Ç–∞–µ—Ç –≤ —á–∞—Ç–∞—Ö –∏ –≥—Ä—É–ø–ø–∞—Ö.")
    app.run_polling()


if __name__ == "__main__":
    main()