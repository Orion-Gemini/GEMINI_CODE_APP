import os
import asyncio
import base64
import re
from telegram import BotCommandScopeAllPrivateChats, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from io import BytesIO
from dotenv import load_dotenv

import aiohttp
import requests
from telegram import Update, BotCommand
from telegram.ext import (
    ApplicationBuilder, CommandHandler,
    MessageHandler, ContextTypes, filters
)

# === –ö–û–ù–°–¢–ê–ù–¢–´ ===
MAX_HISTORY_MESSAGES = 4
MAX_RETRIES = 3
WEBAPP_URL = os.getenv("WEBAPP_URL", "https://your-webapp-domain.com")
# ===============================

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
load_dotenv()

TOKEN = os.getenv("TELEGRAM_TOKEN")
GAS_PROXY_URL = os.getenv("GAS_PROXY_URL")

TOKEN = TOKEN.strip() if TOKEN else None
GAS_PROXY_URL = GAS_PROXY_URL.strip() if GAS_PROXY_URL else None

if not TOKEN or not GAS_PROXY_URL:
    print("–û—à–∏–±–∫–∞: –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ TELEGRAM_TOKEN –∏ GAS_PROXY_URL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ —Ñ–∞–π–ª–µ .env")
    exit(1)


# ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–æ—Ç–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–æ —Ñ—É–Ω–∫—Ü–∏–π) ...

# === –î–û–ë–ê–í–õ–Ø–ï–ú –ö–û–ú–ê–ù–î–£ –î–õ–Ø MINI APP ===
async def webapp_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è Mini App"""
    keyboard = [[
        InlineKeyboardButton(
            "üì± –û—Ç–∫—Ä—ã—Ç—å Web App",
            web_app=WebAppInfo(url=WEBAPP_URL)
        )
    ]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "–û—Ç–∫—Ä–æ–π—Ç–µ Web App –¥–ª—è —É–¥–æ–±–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å Gemini AI –≤ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ:",
        reply_markup=reply_markup
    )


# === –û–ë–ù–û–í–õ–Ø–ï–ú –§–£–ù–ö–¶–ò–Æ help_command ===
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥."""
    keyboard = [[
        InlineKeyboardButton(
            "üì± –û—Ç–∫—Ä—ã—Ç—å Web App",
            web_app=WebAppInfo(url=WEBAPP_URL)
        )
    ]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "üìò –ö–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –Ω–∞—á–∞—Ç—å\n"
        "/help ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
        "/reset ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞\n"
        "/app ‚Äî –æ—Ç–∫—Ä—ã—Ç—å Web App\n\n"
        "üí¨ –í –≥—Ä—É–ø–ø–µ –∏—Å–ø–æ–ª—å–∑—É–π **@**, —á—Ç–æ–±—ã –±–æ—Ç –æ—Ç–≤–µ—Ç–∏–ª. –ë–æ—Ç –ø–æ–º–Ω–∏—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.\n"
        "üñºÔ∏è –ê–Ω–∞–ª–∏–∑: –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç (PDF, TXT) —Å –ø–æ–¥–ø–∏—Å—å—é, **—É–ø–æ–º—è–Ω—É–≤ –±–æ—Ç–∞ (@–≤–∞—à_–±–æ—Ç)**, –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.",
        reply_markup=reply_markup
    )


# === –ó–∞–ø—É—Å–∫ ===
def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    app = ApplicationBuilder().token(TOKEN).concurrent_updates(True).read_timeout(30).build()

    # === –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ===
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("reset", reset_command))
    app.add_handler(CommandHandler("app", webapp_command))  # <-- –ù–û–í–ê–Ø –ö–û–ú–ê–ù–î–ê

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    file_handler = MessageHandler(
        (filters.PHOTO | filters.Document.ALL) & filters.UpdateType.MESSAGE,
        handle_files
    )
    app.add_handler(file_handler)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    app.post_init = set_bot_commands

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ Amvera. –†–∞–±–æ—Ç–∞–µ—Ç –≤ —á–∞—Ç–∞—Ö –∏ –≥—Ä—É–ø–ø–∞—Ö.")

    # –ó–∞–ø—É—Å–∫ polling (–¥–ª—è Amvera)
    app.run_polling(
        allowed_updates=Update.ALL_TYPES,
        drop_pending_updates=True
    )


if __name__ == "__main__":
    main()